use std::{env, fs, io::Result, path::Path, process, process::Command, process::Stdio};

fn main() {
    let current = env::current_dir().unwrap();
    let mut fullpath = fs::canonicalize(current).unwrap();
    fullpath.push("micro-dev-tools/src/.trunk/hooks");

    let exe = Exe { base: fullpath };

    exe.cargo_run("bundle", &[]);
}

struct Exe<T: AsRef<Path>> {
    base: T,
}

impl<T: AsRef<Path>> Exe<T> {
    fn cargo_script<'a>(&self, script: &'a str, args: &'a [&str]) {
        let mut cmd = Command::new("cargo");
        cmd.arg("run")
            .arg(self.base.as_ref().join(script))
            .arg("--")
            .args(args)
            .stdout(Stdio::inherit())
            .stderr(Stdio::inherit());

        let len = 5;
        let title = format!("===== cargo script : {:?} =====", script);
        let end = "=".repeat(title.chars().count());
        println!("\x1b[32m{}\x1b[0m", title);
        cmd.output();
        println!("\x1b[32m{}\x1b[0m", end);
    }

    fn cargo_run<'a>(&self, script: &'a str, args: &'a [&str]) {
        let mut cmd = Command::new("cargo");
        cmd.current_dir(self.base.as_ref().join(script))
            .arg("run")
            .arg("--")
            .args(args)
            .stdout(Stdio::inherit())
            .stderr(Stdio::inherit());

        println!("{}", self.base.as_ref().join(script).as_os_str().to_string_lossy());
        let len = 5;
        let title = format!("===== cargo run : {:?} =====", script);
        let end = "=".repeat(title.chars().count());
        println!("\x1b[32m{}\x1b[0m", title);
        cmd.output();
        println!("\x1b[32m{}\x1b[0m", end);
    }
}
